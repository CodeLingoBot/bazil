// Code generated by protoc-gen-go.
// source: bazil.org/bazil/peer/wire/peer.proto
// DO NOT EDIT!

/*
Package wire is a generated protocol buffer package.

It is generated from these files:
	bazil.org/bazil/peer/wire/peer.proto

It has these top-level messages:
	PingRequest
	PingResponse
	ObjectPutRequest
	ObjectPutResponse
	ObjectGetRequest
	ObjectGetResponse
	VolumeConnectRequest
	VolumeConnectResponse
	VolumeSyncPullRequest
	VolumeSyncPullItem
	Dirent
	File
	Dir
	Tombstone
*/
package wire

import proto "github.com/golang/protobuf/proto"
import bazil_cas "bazil.org/bazil/cas/wire"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type VolumeSyncPullItem_Error int32

const (
	VolumeSyncPullItem_SUCCESS VolumeSyncPullItem_Error = 0
	// The path in the request did not refer to a directory.
	VolumeSyncPullItem_NOT_A_DIRECTORY VolumeSyncPullItem_Error = 1
)

var VolumeSyncPullItem_Error_name = map[int32]string{
	0: "SUCCESS",
	1: "NOT_A_DIRECTORY",
}
var VolumeSyncPullItem_Error_value = map[string]int32{
	"SUCCESS":         0,
	"NOT_A_DIRECTORY": 1,
}

func (x VolumeSyncPullItem_Error) String() string {
	return proto.EnumName(VolumeSyncPullItem_Error_name, int32(x))
}

type PingRequest struct {
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}

type PingResponse struct {
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}

type ObjectPutRequest struct {
	// Only set in the first streamed message.
	Key  []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ObjectPutRequest) Reset()         { *m = ObjectPutRequest{} }
func (m *ObjectPutRequest) String() string { return proto.CompactTextString(m) }
func (*ObjectPutRequest) ProtoMessage()    {}

type ObjectPutResponse struct {
}

func (m *ObjectPutResponse) Reset()         { *m = ObjectPutResponse{} }
func (m *ObjectPutResponse) String() string { return proto.CompactTextString(m) }
func (*ObjectPutResponse) ProtoMessage()    {}

type ObjectGetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *ObjectGetRequest) Reset()         { *m = ObjectGetRequest{} }
func (m *ObjectGetRequest) String() string { return proto.CompactTextString(m) }
func (*ObjectGetRequest) ProtoMessage()    {}

type ObjectGetResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ObjectGetResponse) Reset()         { *m = ObjectGetResponse{} }
func (m *ObjectGetResponse) String() string { return proto.CompactTextString(m) }
func (*ObjectGetResponse) ProtoMessage()    {}

type VolumeConnectRequest struct {
	VolumeName string `protobuf:"bytes,1,opt,name=volumeName" json:"volumeName,omitempty"`
}

func (m *VolumeConnectRequest) Reset()         { *m = VolumeConnectRequest{} }
func (m *VolumeConnectRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeConnectRequest) ProtoMessage()    {}

type VolumeConnectResponse struct {
	VolumeID []byte `protobuf:"bytes,1,opt,name=volumeID,proto3" json:"volumeID,omitempty"`
}

func (m *VolumeConnectResponse) Reset()         { *m = VolumeConnectResponse{} }
func (m *VolumeConnectResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeConnectResponse) ProtoMessage()    {}

type VolumeSyncPullRequest struct {
	VolumeID []byte `protobuf:"bytes,1,opt,name=volumeID,proto3" json:"volumeID,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *VolumeSyncPullRequest) Reset()         { *m = VolumeSyncPullRequest{} }
func (m *VolumeSyncPullRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeSyncPullRequest) ProtoMessage()    {}

type VolumeSyncPullItem struct {
	// This is used to work around gRPC fixed error codes and error
	// strings.
	//
	// It can only be present in the first streamed message.
	// All other fields are to be ignored.
	Error VolumeSyncPullItem_Error `protobuf:"varint,1,opt,name=error,enum=bazil.peer.VolumeSyncPullItem_Error" json:"error,omitempty"`
	// Logical clocks in Dirents use small integers to identify peers.
	// This map connects those identifiers to globally unique peer
	// public keys.
	//
	// This can only be present in the first streamed message.
	Peers map[uint32][]byte `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Logical clock for the directory itself.
	//
	// This can only be present in the first streamed message.
	DirClock []byte `protobuf:"bytes,4,opt,name=dirClock,proto3" json:"dirClock,omitempty"`
	// Directory entries. More entries may follow in later streamed
	// messages. The entries are required to be in lexicographical
	// (bytewise) order, across all messages.
	Children []*Dirent `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
}

func (m *VolumeSyncPullItem) Reset()         { *m = VolumeSyncPullItem{} }
func (m *VolumeSyncPullItem) String() string { return proto.CompactTextString(m) }
func (*VolumeSyncPullItem) ProtoMessage()    {}

func (m *VolumeSyncPullItem) GetPeers() map[uint32][]byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *VolumeSyncPullItem) GetChildren() []*Dirent {
	if m != nil {
		return m.Children
	}
	return nil
}

type Dirent struct {
	Name      string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	File      *File      `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
	Dir       *Dir       `protobuf:"bytes,3,opt,name=dir" json:"dir,omitempty"`
	Tombstone *Tombstone `protobuf:"bytes,5,opt,name=tombstone" json:"tombstone,omitempty"`
	Clock     []byte     `protobuf:"bytes,4,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (m *Dirent) Reset()         { *m = Dirent{} }
func (m *Dirent) String() string { return proto.CompactTextString(m) }
func (*Dirent) ProtoMessage()    {}

func (m *Dirent) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Dirent) GetDir() *Dir {
	if m != nil {
		return m.Dir
	}
	return nil
}

func (m *Dirent) GetTombstone() *Tombstone {
	if m != nil {
		return m.Tombstone
	}
	return nil
}

type File struct {
	Manifest *bazil_cas.Manifest `protobuf:"bytes,1,opt,name=manifest" json:"manifest,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}

func (m *File) GetManifest() *bazil_cas.Manifest {
	if m != nil {
		return m.Manifest
	}
	return nil
}

type Dir struct {
}

func (m *Dir) Reset()         { *m = Dir{} }
func (m *Dir) String() string { return proto.CompactTextString(m) }
func (*Dir) ProtoMessage()    {}

type Tombstone struct {
}

func (m *Tombstone) Reset()         { *m = Tombstone{} }
func (m *Tombstone) String() string { return proto.CompactTextString(m) }
func (*Tombstone) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("bazil.peer.VolumeSyncPullItem_Error", VolumeSyncPullItem_Error_name, VolumeSyncPullItem_Error_value)
}

// Client API for Peer service

type PeerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ObjectPut(ctx context.Context, opts ...grpc.CallOption) (Peer_ObjectPutClient, error)
	ObjectGet(ctx context.Context, in *ObjectGetRequest, opts ...grpc.CallOption) (Peer_ObjectGetClient, error)
	VolumeConnect(ctx context.Context, in *VolumeConnectRequest, opts ...grpc.CallOption) (*VolumeConnectResponse, error)
	VolumeSyncPull(ctx context.Context, in *VolumeSyncPullRequest, opts ...grpc.CallOption) (Peer_VolumeSyncPullClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/bazil.peer.Peer/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) ObjectPut(ctx context.Context, opts ...grpc.CallOption) (Peer_ObjectPutClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/bazil.peer.Peer/ObjectPut", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerObjectPutClient{stream}
	return x, nil
}

type Peer_ObjectPutClient interface {
	Send(*ObjectPutRequest) error
	CloseAndRecv() (*ObjectPutResponse, error)
	grpc.ClientStream
}

type peerObjectPutClient struct {
	grpc.ClientStream
}

func (x *peerObjectPutClient) Send(m *ObjectPutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerObjectPutClient) CloseAndRecv() (*ObjectPutResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ObjectPutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) ObjectGet(ctx context.Context, in *ObjectGetRequest, opts ...grpc.CallOption) (Peer_ObjectGetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[1], c.cc, "/bazil.peer.Peer/ObjectGet", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerObjectGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Peer_ObjectGetClient interface {
	Recv() (*ObjectGetResponse, error)
	grpc.ClientStream
}

type peerObjectGetClient struct {
	grpc.ClientStream
}

func (x *peerObjectGetClient) Recv() (*ObjectGetResponse, error) {
	m := new(ObjectGetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) VolumeConnect(ctx context.Context, in *VolumeConnectRequest, opts ...grpc.CallOption) (*VolumeConnectResponse, error) {
	out := new(VolumeConnectResponse)
	err := grpc.Invoke(ctx, "/bazil.peer.Peer/VolumeConnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) VolumeSyncPull(ctx context.Context, in *VolumeSyncPullRequest, opts ...grpc.CallOption) (Peer_VolumeSyncPullClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[2], c.cc, "/bazil.peer.Peer/VolumeSyncPull", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerVolumeSyncPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Peer_VolumeSyncPullClient interface {
	Recv() (*VolumeSyncPullItem, error)
	grpc.ClientStream
}

type peerVolumeSyncPullClient struct {
	grpc.ClientStream
}

func (x *peerVolumeSyncPullClient) Recv() (*VolumeSyncPullItem, error) {
	m := new(VolumeSyncPullItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Peer service

type PeerServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ObjectPut(Peer_ObjectPutServer) error
	ObjectGet(*ObjectGetRequest, Peer_ObjectGetServer) error
	VolumeConnect(context.Context, *VolumeConnectRequest) (*VolumeConnectResponse, error)
	VolumeSyncPull(*VolumeSyncPullRequest, Peer_VolumeSyncPullServer) error
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PingRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PeerServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Peer_ObjectPut_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).ObjectPut(&peerObjectPutServer{stream})
}

type Peer_ObjectPutServer interface {
	SendAndClose(*ObjectPutResponse) error
	Recv() (*ObjectPutRequest, error)
	grpc.ServerStream
}

type peerObjectPutServer struct {
	grpc.ServerStream
}

func (x *peerObjectPutServer) SendAndClose(m *ObjectPutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerObjectPutServer) Recv() (*ObjectPutRequest, error) {
	m := new(ObjectPutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_ObjectGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObjectGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServer).ObjectGet(m, &peerObjectGetServer{stream})
}

type Peer_ObjectGetServer interface {
	Send(*ObjectGetResponse) error
	grpc.ServerStream
}

type peerObjectGetServer struct {
	grpc.ServerStream
}

func (x *peerObjectGetServer) Send(m *ObjectGetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Peer_VolumeConnect_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(VolumeConnectRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(PeerServer).VolumeConnect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Peer_VolumeSyncPull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeSyncPullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServer).VolumeSyncPull(m, &peerVolumeSyncPullServer{stream})
}

type Peer_VolumeSyncPullServer interface {
	Send(*VolumeSyncPullItem) error
	grpc.ServerStream
}

type peerVolumeSyncPullServer struct {
	grpc.ServerStream
}

func (x *peerVolumeSyncPullServer) Send(m *VolumeSyncPullItem) error {
	return x.ServerStream.SendMsg(m)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bazil.peer.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Peer_Ping_Handler,
		},
		{
			MethodName: "VolumeConnect",
			Handler:    _Peer_VolumeConnect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObjectPut",
			Handler:       _Peer_ObjectPut_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ObjectGet",
			Handler:       _Peer_ObjectGet_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "VolumeSyncPull",
			Handler:       _Peer_VolumeSyncPull_Handler,
			ServerStreams: true,
		},
	},
}
